plugins {
    id "org.sonarqube" version "2.2"
}

printf "Host: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGroovy: %s\nGradle: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        GroovySystem.getVersion(),
        gradle.gradleVersion

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "jacoco"

configurations {
    wagon
    provided
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.xbib:marc:1.0.6'
    compile "org.xbib:content-rdf:1.0.7"
    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.logging.log4j:log4j-core:2.7'
    testCompile 'org.apache.logging.log4j:log4j-jul:2.7'
    provided "org.xbib:bibliographic-character-sets:1.0.0"
    wagon 'org.apache.maven.wagon:wagon-ssh-external:2.10'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-profile" << "compact1"
}

test {
    classpath += configurations.provided
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
}
artifacts {
    archives sourcesJar, javadocJar
}
if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: 'gradle/ext.gradle'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/sonarqube.gradle'
